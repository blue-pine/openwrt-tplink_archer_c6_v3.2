#!/bin/sh

. /lib/iptv/iptv_init.sh
. /lib/network/network_init.sh
. /lib/iptv/iptv_func.sh
. /lib/iptv/iptv_arch.sh

#[ "$ACTION" = "RESTART" ] && /etc/init.d/iptv restart
local iptv_sw_vlan_list=""


switch_set_iptv()
{
	local ether="0"
	local loop=10


	
	#clear VLAN entry
	clear_switch_vlan
	
	#WAN VLAN
	local mode=$(uci_get_state iptv core mode)
	local wanphyport=$(get_wan_phyportseq)
	local internet_vid=$(uci_get_state iptv core internet_vid)
	local iptv_vid=$(uci_get_state iptv core iptv_vid)
	local mciptv_vid=$(uci_get_state iptv core mciptv_vid)
	local ipphone_vid=$(uci_get_state iptv core ipphone_vid)
	local internet_tag=$(uci_get_state iptv core internet_tag)
	local iptv_tag=$(uci_get_state iptv core iptv_tag) 
	local ipphone_tag=$(uci_get_state iptv core ipphone_tag)
	local bridgePort=$(uci_get_state iptv core bridgePort)
	local mciptv_en=$(uci get iptv.$mode.mciptv_enable)

	if [ -z $iptv_tag ]; then
		iptv_tag="on"
	fi

	if [ -z $ipphone_tag ]; then
		ipphone_tag="on"
	fi
	
	if [ "$mode" == "Bridge" ]; then
		set_switch_vlan ${WAN_DEFUALT_VID} "$wanphyport" "off" 1 && append iptv_sw_vlan_list "${WAN_DEFUALT_VID}"
	else 
		if [ "$internet_tag" = "off" ]; then
			[ -n "${internet_vid}" ] && set_switch_vlan "${internet_vid}" "$wanphyport $bridgePort" "${internet_tag}" 1 && append iptv_sw_vlan_list "${internet_vid}"
			[ -n "${iptv_vid}" ] && set_switch_vlan "${iptv_vid}" "$wanphyport $bridgePort" "${iptv_tag}" 1 && append iptv_sw_vlan_list "${iptv_vid}"	
			[ -n "${ipphone_vid}" ] && set_switch_vlan "${ipphone_vid}" "$wanphyport $bridgePort" "${ipphone_tag}" 1 && append iptv_sw_vlan_list "${ipphone_vid}"
		elif [ "$iptv_tag" = "off" ]; then
		  	[ -n "${iptv_vid}" ] && set_switch_vlan "${iptv_vid}" "$wanphyport $bridgePort" "${iptv_tag}" 1 && append iptv_sw_vlan_list "${iptv_vid}"
			[ -n "${internet_vid}" ] && set_switch_vlan "${internet_vid}" "$wanphyport $bridgePort" "${internet_tag}" 1 && append iptv_sw_vlan_list "${internet_vid}"	
			[ -n "${ipphone_vid}" ] && set_switch_vlan "${ipphone_vid}" "$wanphyport $bridgePort" "${ipphone_tag}" 1 && append iptv_sw_vlan_list "${ipphone_vid}"		
		else
			[ -n "${ipphone_vid}" ] && set_switch_vlan "${ipphone_vid}" "$wanphyport $bridgePort" "${ipphone_tag}" 1 && append iptv_sw_vlan_list "${ipphone_vid}"
			[ -n "${internet_vid}" ] && set_switch_vlan "${internet_vid}" "$wanphyport $bridgePort" "${internet_tag}" 1 && append iptv_sw_vlan_list "${internet_vid}"
			[ -n "${iptv_vid}" ] && set_switch_vlan "${iptv_vid}" "$wanphyport $bridgePort" "${iptv_tag}" 1 && append iptv_sw_vlan_list "${iptv_vid}"
		fi		
			[ "A${mciptv_en}" == "Aon" ] &&	[ -n "${mciptv_vid}" ] && set_switch_vlan "${mciptv_vid}" "$wanphyport $bridgePort" "on" 1 && append iptv_sw_vlan_list "${mciptv_vid}"		
	fi

	#LAN VLAN
	local lanphyport=0
	local lanvid=0
	for lan in ${LAN_PORT_SET} ; do
		if [ "$lan" == "$bridgePort" ]; then                                                      
			continue                                                                            
		fi   
		lanphyport=$(get_lan_phyport_bylogic $lan)
		lanvid=$(get_vid_by_port $lan)
		set_switch_vlan "${lanvid}" "$lanphyport" "off" 2 && append iptv_sw_vlan_list "${lanvid}"
	done
	uci_revert_state switch
	uci_set_state switch core "" state
	uci_set_state switch core sw_vlan_list "$iptv_sw_vlan_list"
}

switch_set_snooping()
{
	local ether="0"
	local loop=10

	
	#clear VLAN entry
	clear_switch_vlan
	
	#WAN VLAN
	local wanphyport=$(get_wan_phyportseq)
	set_switch_vlan ${WAN_DEFUALT_VID} "$wanphyport" "off" 1 && append iptv_sw_vlan_list "${WAN_DEFUALT_VID}"

	#LAN VLAN
	local lanphyport=0
	local lanvid=0
	local index=1
	for lan in ${LAN_PORT_SET} ; do
		lanphyport=$(get_lan_phyport_bylogic $lan)
		lanvid=$(eval "echo \"${LAN_DEFUALT_VID}\" | awk '{print \$${index}}'")
		set_switch_vlan "${lanvid}" "$lanphyport" "off" 2 && append iptv_sw_vlan_list "${lanvid}"
		index=$((index+1))
	done
	uci_revert_state switch
	uci_set_state switch core "" state
	uci_set_state switch core sw_vlan_list "$iptv_sw_vlan_list"
}



set_multicast_router()
{
	
	local igmp_snooping mode
	local internet_iface=
	local iptv_iface=
	local ipphone_iface=
	local mciptv_iface=
	local wanphy=

	config_load iptv
	config_get mode "iptv" "mode"
	config_get igmp_snooping "iptv" "igmp_snooping_enable" "off"
	[ "$igmp_snooping" = "off" ] && return

	for wanphy in $(get_wan_initifs); do
		wanphy=${wanphy%%.*}
	done
	internet_iface="${wanphy}.$(uci_get_state iptv core internet_vid 1)"
	iptv_iface="${wanphy}.$(uci_get_state iptv core iptv_vid 1)"
	ipphone_iface="${wanphy}.$(uci_get_state iptv core ipphone_vid 1)"
	mciptv_iface="${wanphy}.$(uci_get_state iptv core mciptv_vid 1)"

	case "$mode" in
		Bridge)
		[ -f /sys/devices/virtual/net/$(get_wan_initifs)/brport/multicast_router ] && echo 2 >/sys/devices/virtual/net/$(get_wan_initifs)/brport/multicast_router
		;;
		*)
		#[ -f /sys/devices/virtual/net/$internet_iface/brport/multicast_router ] && echo 2 > /sys/devices/virtual/net/$internet_iface/brport/multicast_router
		[ -f /sys/devices/virtual/net/$iptv_iface/brport/multicast_router ] && echo 2 > /sys/devices/virtual/net/$iptv_iface/brport/multicast_router
		[ -f /sys/devices/virtual/net/$mciptv_iface/brport/multicast_router ] && echo 2 > /sys/devices/virtual/net/$mciptv_iface/brport/multicast_router
		[ -f /sys/devices/virtual/net/$ipphone_iface/brport/multicast_router ] && echo 2 > /sys/devices/virtual/net/$ipphone_iface/brport/multicast_router

		;;
	esac
	echo "set_multicast_router done" > /dev/console
}

## need wait some time to let netifd  creating interfaces first


local iptv_enable snooping_enable
config_load iptv
config_get iptv_enable iptv enable "off"
config_get snooping_enable iptv igmp_snooping_enable "off"

## add lock to avoid switch set error
lock /var/run/switch-set.lock
if [ "$iptv_enable" = "on" ];then
	switch_set_iptv
elif  [ "$snooping_enable" = "on" ];then
	switch_set_snooping
fi
lock -u /var/run/switch-set.lock	
{
 #switch reg w 1fe0 20087864  do not shut off the whole flow control, for wifi 5g rx performace will speed down.
	/usr/bin/mii_mgr -s -p 0 -r 4 -v 0x01e1
	/usr/bin/mii_mgr -s -p 1 -r 4 -v 0x01e1
	/usr/bin/mii_mgr -s -p 2 -r 4 -v 0x01e1
	/usr/bin/mii_mgr -s -p 3 -r 4 -v 0x01e1
	/usr/bin/mii_mgr -s -p 4 -r 4 -v 0x01e1
 # shut wan/lan port flow control
 sleep 5 && set_multicast_router
}&


