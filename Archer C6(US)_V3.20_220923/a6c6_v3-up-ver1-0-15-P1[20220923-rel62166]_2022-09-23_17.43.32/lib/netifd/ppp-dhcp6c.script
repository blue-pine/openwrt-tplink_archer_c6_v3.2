#!/bin/sh

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

IFNAME=$ifname
INTERFACE=$interface
STATE=$new_dhcpc_state

DEFAULT_DNS_FILE="/tmp/resolv.conf"
ppp_up="/tmp/pppv6/ppp_up"
pppdir="/tmp/pppv6"

[ -z "$INTERFACE" ] && exit 1
[ -z "$IFNAME" ] && exit 1

deconfig_interface() {
	proto_init_update "$IFNAME" 0
	proto_send_update "$INTERFACE"
}

setup_interface () {
	local remoteip

	i=0
	config_load /etc/config/network
	config_get proto wanv6 proto
	config_get ip_config wanv6 ip_config
	config_get lan_proto lanv6 proto
	
	proto_init_update "$IFNAME" 1 1
	proto_set_keep 1
	
	[ $ip_config != "specified" ] && {	
	# using SLAAC or DHCPv6 is decided by user
	#
	mbit=`cat /proc/sys/net/ipv6/conf/$IFNAME/ndisc_mbit`
	[ $mbit -eq 0 -o "$ip_config" == "slaac" ] && [ "$ip_config" == "slaac" -o "$ip_config" == "auto" ] && {

			while read line
			do
				[ $IFNAME != ${line##* } ] && continue
				[ "fe80" = ${line:0:4} ] && continue
			
				element=${line:0:32}

				ip6addr=${element:0:4}:${element:4:4}:${element:8:4}:${element:12:4}
				ip6addr=$ip6addr:${element:16:4}:${element:20:4}:${element:24:4}:${element:28:4}

				new_ip6addr=$ip6addr

			done </proc/net/if_inet6

			[ -n "$new_ip6addr" ] && [ ! -f "/tmp/slaac_addr" ] && {
				echo $new_ip6addr > /tmp/slaac_addr
			}
			[ -z "$new_ip6addr" ] && {
				proto_notify_error "$INTERFACE" "NO ADDRESS" 
				sleep 3 
				proto_setup_failed "$INTERFACE"
				return
			}
		}

		[ $mbit -eq 1 -o "$ip_config" == "dhcpv6" ] && [ "$ip_config" == "dhcpv6" -o "$ip_config" == "auto" ] && {
			local dhcpv6_addr="$(cat /tmp/dhcp6c/dhcpv6_addr)"
			[ -n "$dhcpv6_addr" ] && [ -n "$new_ip6addr" ] && [ "$new_ip6addr" != "$dhcpv6_addr" ] && {
				[ "$wan_proto" == "v6plus" -o "$wan_proto" == "dslite" ] && {
					echo dhcpv6_addr change, restart wan !!!!! > /dev/console
					ubus call network.interface.wan down
					ubus call network.interface.wan up
				}
				[ "$lan_proto" == "ndp" ] && {
					local lanv6_prefix=$(lua /lib/netifd/lanv6_genrate_ndp_prefix.lua $new_ip6addr)
					echo "$lanv6_prefix" > /tmp/dhcp6c/ndp_prefix
					uci set network.lanv6.prefix="$lanv6_prefix"
					uci commit network
					uci set protocol.ndp.prefix="$lanv6_prefix"
					uci commit protocol
					ubus call network.interface.lanv6 down
					sleep 1
					ubus call network.interface.lanv6 up
				}
			}
			[ -n "$new_ip6addr" ] && echo $new_ip6addr > /tmp/dhcp6c/dhcpv6_addr
		}

		if [ -n "$new_ip6addr" ]; then
			proto_add_ipv6_address "$new_ip6addr" "64"
		elif [ -z "$new_ip6prefix" ] && [ $ip_config != "non_address" ]; then
			deconfig_interface
			return
		fi
	
		[ "$proto" == "pppoev6" -a -f "$ppp_up" ] && {
	#		cat "$ppp_up" | while read line
			while read line
			do
				[ "$i" == "0" -a "$line" != "none" ] && proto_add_ipv4_address "$line" "32"
				[ "$i" == "1" -a "$line" != "none" ] && proto_add_ipv4_route "0.0.0.0" "0" "$line"
				[ "$i" == "2" -a "$line" != "none" ] && proto_add_ipv6_address "$line" "64"
				[ "$i" == "3" -a "$line" != "none" ] && {
					remoteip="$line"
					proto_add_ipv6_route "::" "0" "$line"
					ip -6 route add ::/0 via $line dev $IFNAME metric 256
				}
				
				i=`expr $i + 1`	
			done < "$ppp_up"
			rm -rf "$pppdir"
		}
	}
	
	[ -n "$new_domain_name_servers" ] && {
		DNS2=${new_domain_name_servers##*[, ]}
		DNS1=${new_domain_name_servers%%[, ]*}
		[ -n "$DNS1" ] && [ -z "$(cat $DEFAULT_DNS_FILE |grep $DNS1$)" ] && proto_add_dns_server "$DNS1"
		[ -n "$DNS1" -a -n "$DNS2" -a "$DNS1" != "$DNS2" ] && [ -z "$(cat $DEFAULT_DNS_FILE |grep $DNS2$)" ] && proto_add_dns_server "$DNS2"
	}

    [ -n "$new_ip6prefix" ] && {
		prefix="$new_ip6prefix"
		local dhcpv6_pd="$(cat /tmp/dhcp6c/prefix.info)"
		[ -n "$dhcpv6_pd" ] && [ "$dhcpv6_pd" != "$prefix" ] && [ "$lan_proto" != "ndp" ] && {
			echo pd change !!!!!!!!  > /dev/console
			uci set network.lanv6.prefix="$prefix"
			uci commit network
			uci set protocol.dhcp6s.prefix="$prefix"
			uci set protocol.slaac.prefix="$prefix"
			uci set protocol.rdnss.prefix="$prefix"
			uci commit protocol
			ubus call network.interface.lanv6 down
			sleep 1
			ubus call network.interface.lanv6 up
		}
	}
	echo "$prefix" > /tmp/dhcp6c/prefix.info

	proto_send_update "$INTERFACE"
}

# code=0 is equal to [ -n "$new_ip6addr" -o -n "$new_ip6prefix" ]
case "$STATE" in
	"2" | "3")
		#if [ -n "$code" -a "$code" == "0" ]; then
			 setup_interface
		#else
		#	deconfig_interface
		#fi
	;;

	"6")
		deconfig_interface
	;;
esac

exit 0
