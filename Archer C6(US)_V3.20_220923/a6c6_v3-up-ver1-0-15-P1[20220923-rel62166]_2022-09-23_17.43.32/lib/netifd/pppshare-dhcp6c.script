#!/bin/sh

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

IFNAME=$ifname
INTERFACE=$interface
STATE=$new_dhcpc_state

DEFAULT_DNS_FILE="/tmp/resolv.conf"
ppp_up="/tmp/pppv6/ppp_up"
pppdir="/tmp/pppv6"
echo ppp dhcp6c script : $INTERFACE : $IFNAME > /dev/console
[ -z "$INTERFACE" ] && exit 1
[ -z "$IFNAME" ] && exit 1

deconfig_interface() {
	proto_init_update "$IFNAME" 0
	proto_send_update "$INTERFACE"
}

setup_interface () {
	local remoteip
	local ndp_prefix

	i=0
	config_load /etc/config/network
	config_get proto internet proto
	config_get ip_config wan ip_config
	config_get ip6addr wanv6 ip6addr
	config_get lan_proto lanv6 proto

	proto_init_update "$IFNAME" 1 1
	proto_set_keep 1
	echo ip_config in script: $ip_config > /dev/console
	[ $ip_config != "specified" ] && {

		# using SLAAC or DHCPv6 is decided by user
		#
		mbit=`cat /proc/sys/net/ipv6/conf/$IFNAME/ndisc_mbit`
		[ $mbit -eq 0 -o "$ip_config" == "slaac" ] && [ "$ip_config" == "slaac" -o "$ip_config" == "auto" ] && {

			while read line
			do
				[ $IFNAME != ${line##* } ] && continue
				[ "fe80" = ${line:0:4} ] && continue

				element=${line:0:32}
				ip6addr=${element:0:4}:${element:4:4}:${element:8:4}:${element:12:4}
				ip6addr=$ip6addr:${element:16:4}:${element:20:4}:${element:24:4}:${element:28:4}
				new_ip6addr=$ip6addr

			done </proc/net/if_inet6
			[ -n "$new_ip6addr" ] && [ ! -f "/tmp/slaac_addr" ] && {
				echo $new_ip6addr > /tmp/slaac_addr
			}
			echo ppp new_ip6addr:$new_ip6addr > /dev/console
			[ -z "$new_ip6addr" ] && {
				echo ppp slaac setup fail > /dev/console
				proto_notify_error "$INTERFACE" "NO ADDRESS"
				sleep 3
				proto_setup_failed "$INTERFACE"
				return
			}
		}

		if [ -n "$new_ip6addr" ]; then
			proto_add_ipv6_address "$new_ip6addr" "64"
		elif [ -z "$new_ip6prefix" ] && [ $ip_config != "non_address" ]; then
			deconfig_interface
			return
		fi

		if [ -n "$new_ip6addr" -a "$lan_proto" == "ndp" ]; then
			local ndp_prefix=$(lua /lib/netifd/lanv6_genrate_ndp_prefix.lua $new_ip6addr)
			echo "$ndp_prefix" > /tmp/dhcp6c/ndp_prefix
			uci set network.lanv6.prefix="$ndp_prefix" 
	        uci commit network
		    uci set protocol.ndp.prefix="$ndp_prefix"
	        uci commit protocol
		fi

		[ "$proto" == "pppoeshare" -a -f "$ppp_up" ] && {
	#		cat "$ppp_up" | while read line
			while read line
			do
				[ "$i" == "0" -a "$line" != "none" ] && proto_add_ipv4_address "$line" "32"
				[ "$i" == "1" -a "$line" != "none" ] && proto_add_ipv4_route "0.0.0.0" "0" "$line"
				[ "$i" == "2" -a "$line" != "none" ] && proto_add_ipv6_address "$line" "64"
				[ "$i" == "3" -a "$line" != "none" ] && {
					remoteip="$line"
					proto_add_ipv6_route "::" "0" "$line"
					ip -6 route add ::/0 via $line dev $IFNAME metric 256
				}

				i=`expr $i + 1`
			done < "$ppp_up"
			rm -rf "$pppdir"
		}
	}

	if [ "$ip_config" == "specified" -a "$lan_proto" == "ndp" ]; then
		[ -n "$ip6addr" ] && {
			local ndp_prefix=$(lua /lib/netifd/lanv6_genrate_ndp_prefix.lua $ip6addr)
			echo "$ndp_prefix" > /tmp/dhcp6c/ndp_prefix
			uci set network.lanv6.prefix="$ndp_prefix" 
	        uci commit network
		    uci set protocol.ndp.prefix="$ndp_prefix"
	        uci commit protocol
		}
	fi

	[ -n "$new_domain_name_servers" ] && {
		DNS2=${new_domain_name_servers##*[, ]}
		DNS1=${new_domain_name_servers%%[, ]*}
		[ -n "$DNS1" ] && [ -z "$(cat $DEFAULT_DNS_FILE |grep $DNS1$)" ] && proto_add_dns_server "$DNS1"
		[ -n "$DNS1" -a -n "$DNS2" -a "$DNS1" != "$DNS2" ] && [ -z "$(cat $DEFAULT_DNS_FILE |grep $DNS2$)" ]  && proto_add_dns_server "$DNS2"
	}

    if [ -n "$new_ip6prefix" ]; then
        echo "$new_ip6prefix" > /tmp/dhcp6c/prefix.info
	    [ "$lan_proto" != "ndp" ] && {
            uci set network.lanv6.prefix="$new_ip6prefix" 
            uci commit network
        }
	    uci set protocol.dhcp6s.prefix="$new_ip6prefix"
        uci set protocol.slaac.prefix="$new_ip6prefix"
        uci set protocol.rdnss.prefix="$new_ip6prefix"
        uci commit protocol
    fi

    config_get lanif lanv6 ifname
    if [ -n "$lanif" ]; then
    	echo lanif $lanif > /dev/console
		forwarding=`cat /proc/sys/net/ipv6/conf/all/forwarding`
		[ $forwarding -ne 1 ] && echo "1" > /proc/sys/net/ipv6/conf/all/forwarding 
	    ubus call network.interface.lanv6 down
	    sleep 1
	    ubus call network.interface.lanv6 up
    fi

	proto_send_update "$INTERFACE"
}

# code=0 is equal to [ -n "$new_ip6addr" -o -n "$new_ip6prefix" ]
case "$STATE" in
	"2" | "3")
		# if [ -n "$code" -a "$code" == "0" ]; then
			setup_interface
		# else
		# 	deconfig_interface
		# fi
	;;

	"6")
		deconfig_interface
	;;
esac

exit 0
