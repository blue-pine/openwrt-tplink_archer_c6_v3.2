#!/usr/bin/lua

local tmpv2 = require "tmpv2"
local json = require "luci.json"
local dbg = require "luci.tools.debug"
local uci  = require "luci.model.uci"
local script = require "sync-script"
local wlan  = require "luci.model.wireless"
local ubus = require "ubus"
local die = script.die
local finalize = script.finalize

local infile = arg[1]
local outfile = arg[2]
local opcode = arg[3]
local onemesh_list_devices = {}
local wifi_data = {}

script.outfile = outfile

local function debug(str)
    --dbg.print("[Sync-server request] " .. str)
end

local function debug_tbl(tbl)
    --dbg.dumptable(tbl)
end

local function wireless_status_all(formvalue)
    local form = {"wireless_2g", "wireless_5g"}
    return wlan.Apcfg(form):read()
end

local function request(tmpcli, ip, mac)
    local wpa3_support=false

    debug("enter request(tmpcli),ip " .. ip .. ",mac " .. mac)
    debug_tbl(onemesh_list_devices)

    if not onemesh_list_devices or type(onemesh_list_devices) ~= "table" then
        wpa3_support=false
    else
        if not onemesh_list_devices[mac] or type(onemesh_list_devices[mac]) ~= "table" then
            wpa3_support=false
        else
            if not onemesh_list_devices[mac]["wpa3_support"] or 1 ~= onemesh_list_devices[mac]["wpa3_support"] then
                wpa3_support=false
            else
                wpa3_support=true
            end
        end
    end

    debug_tbl(wifi_data)
    if wpa3_support == false then
        if wifi_data ~=nil and wifi_data["2.4G"] ~= nil then
            if wifi_data["2.4G"]["encryption"] == "psk_sae" then
				wifi_data["2.4G"]["encryption"] = "psk"
				wifi_data["2.4G"]["psk_version"] = "rsn"
				wifi_data["2.4G"]["psk_cipher"] = "aes"
	    elseif wifi_data["2.4G"]["psk_version"] == "sae_transition" or wifi_data["2.4G"]["psk_version"] == "sae_only" then
				wifi_data["2.4G"]["psk_version"] = "rsn"
				wifi_data["2.4G"]["psk_cipher"] = "aes"
			end
        end
        if wifi_data ~=nil and wifi_data["5G"] ~= nil then
            if wifi_data["5G"]["encryption"] == "psk_sae" then
				wifi_data["5G"]["encryption"] = "psk"
				wifi_data["5G"]["psk_version"] = "rsn"
				wifi_data["5G"]["psk_cipher"] = "aes"
	    elseif wifi_data["5G"]["psk_version"] == "sae_transition" or wifi_data["5G"]["psk_version"] == "sae_only" then
				wifi_data["5G"]["psk_version"] = "rsn"
				wifi_data["5G"]["psk_cipher"] = "aes"
	    end
        end
    end

    -- Fix Bug 302111 start
    if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["psk_cipher"] == "tkip" then
        wifi_data["2.4G"]["psk_cipher"] = "auto"
    end
    if wifi_data ~=nil and wifi_data["5G"] ~= nil and wifi_data["5G"]["psk_cipher"] == "tkip" then
        wifi_data["5G"]["psk_cipher"] = "auto"
    end
    -- Fix Bug 302111 end

    if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["encryption"] ~= nil then
        local wifi_msg = json.encode(wifi_data)
        debug(wifi_msg)
        os.remove(infile)
        local f = io.open(infile, "w")
        f:write(wifi_msg)
        f:close()
    end

    local data, msg = tmpcli:request(opcode, {infile = infile})
    if not data then
        return nil, msg
    end

    if nil ~= data then
        debug("[TPIPF] data is " .. data)
    else
        debug("[TPIPF] data is nil")
    end

    if nil ~= msg then
        debug("[TPIPF] msg is " .. msg)
    else
        debug("[TPIPF] msg is nil")
    end

    local data = json.decode(data)

    return true, data
end

local function main()
    if tonumber(opcode) then
        opcode = tonumber(opcode)
    end
    assert(opcode and infile and outfile, "invalid arguments")
    assert(#arg > 3, "invalid arguments")

    local _ubus = ubus.connect()
    onemesh_list_devices  = _ubus:call("tdpServer", "onemesh_list_devices", {})

    -- Debug Info
    debug_tbl(onemesh_list_devices)   
    --debug_tbl(onemesh_list_devices[arg[5]])
    --debug("=========== onemesh_list_devices[arg[5]][\"wpa3_support\"]) ======")   
    --debug(onemesh_list_devices[arg[5]]["wpa3_support"])   

    local fp = io.open(infile, "r")
    if nil == fp then
        wifi_data= nil
    else
        local lines = fp:read("*all")
        fp:close()
        wifi_data = json.decode(lines)
        if wifi_data == nil or next(wifi_data) == nil then
            wifi_data = nil
        end
    end

    -- local uci_r = uci.cursor()
    -- local usr = uci_r:get_profile("accountmgnt", "username")
    -- local pwd = uci_r:get_profile("accountmgnt", "password")     

    local data = script.reduce_concurrent(request, nil, nil, arg, 4, #arg)
    finalize(data)
end

debug("========================= /sync-server/request ==============================")
debug("Prog " .. arg[0])
debug("Infile " .. arg[1])
debug("Outfile " .. arg[2])
debug("Opcode " .. arg[3])
debug("IP " .. arg[4])
debug("Mac " .. arg[5])
if nil ~= arg[6] then
    debug("IP " .. arg[6])
end
if nil ~= arg[7] then
    debug("Mac " .. arg[7])
end
if nil ~= arg[8] then
    debug("IP " .. arg[8])
end
if nil ~= arg[9] then
    debug("Mac " .. arg[9])
end
debug("========================= /sync-server/request end ==========================")

script.run(main)
