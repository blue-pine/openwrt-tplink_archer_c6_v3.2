#!/usr/bin/lua

local tmpv2 = require "tmpv2"
local json = require "luci.json"
local dbg = require "luci.tools.debug"
local uci  = require "luci.model.uci"
local script = require "sync-script"
local die = script.die
local finalize = script.finalize

local infile = arg[1]
local outfile = arg[2]
local opcode = arg[3]

script.outfile = outfile

local function request(tmpcli)
    local data, msg = tmpcli:request(opcode, {infile = infile})
    if not data then
        return nil, msg
    end

    if nil ~= data then
        dbg.print("[TPIPF] data is " .. data)
    else
        dbg.print("[TPIPF] data is nil")
    end

    if nil ~= msg then
        dbg.print("[TPIPF] msg is " .. msg)
    else
        dbg.print("[TPIPF] msg is nil")
    end

    local data = json.decode(data)

    return true, data
end

local function main()
    if tonumber(opcode) then
        opcode = tonumber(opcode)
    end
    assert(opcode and infile and outfile, "invalid arguments")
    assert(#arg > 3, "invalid arguments")

    -- local uci_r = uci.cursor()
    -- local usr = uci_r:get_profile("accountmgnt", "username")
    -- local pwd = uci_r:get_profile("accountmgnt", "password") 
    local uci_r = uci.cursor()    
    local wifi_data = {}
    local RE_2G = uci_r:get_profile("wireless", "wireless_mesh_ifname_2g") or "wl14"
    local RE_5G = uci_r:get_profile("wireless", "wireless_mesh_ifname_5g") or "wl04"
    local tmp1 = {
        backhaul_ssid = uci_r:get_all("onemesh", RE_2G, "ssid"), -- 隐藏backhaul SSID
        backhaul_key  = uci_r:get_all("onemesh", RE_2G, "psk_key")   -- 隐藏backhaul 密码
    }
    local tmp2 = {
        backhaul_ssid = uci_r:get_all("onemesh", RE_5G, "ssid"),  -- 隐藏backhaul SSID
        backhaul_key  = uci_r:get_all("onemesh", RE_5G, "psk_key") -- 隐藏backhaul 密码
    }
    wifi_data["2.4G"] = tmp1
    wifi_data["5G"]   = tmp2
    local wifi_msg = json.encode(wifi_data)
    -- dbg.print(wifi_msg)

    os.remove(infile)
    local f = io.open(infile, "w")
    f:write(wifi_msg)
    f:close()



    local data = script.reduce_concurrent(request, nil, nil, arg, 4, #arg)
    finalize(data)
end

-- dbg.print("========================= /sync-server/trans_backup_wcfg ==============================")
-- dbg.print("Prog " .. arg[0])
-- dbg.print("Infile " .. arg[1])
-- dbg.print("Outfile " .. arg[2])
-- dbg.print("Opcode " .. arg[3])
-- dbg.print("IP " .. arg[4])
-- dbg.print("Mac " .. arg[5])
-- dbg.print("========================= /sync-server/trans_backup_wcfg end ==========================")

script.run(main)
