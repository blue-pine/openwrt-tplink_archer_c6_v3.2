#!/usr/bin/lua

local sys   = require "luci.sys"
local util  = require "luci.util"
local uci   = require "luci.model.uci"
local dbg   = require "luci.tools.debug"

local uci_r   = uci.cursor()
local changed = false
local lan_realif = "eth0"
local wan_realif = "eth1"
local lan_default_mac = "C0:4A:00:0A:A4:14"

local function factory_random_mac_lan()
	dbg.print("============factory_random_mac_lan============")
	local suffix = sys.exec("getfirm DEV_ID |cut -c35-")
	suffix = suffix:gsub("%s", "")
	dbg.print("lan random mac suffix:" .. suffix)
	if #suffix >= 6 then
		local suffix_1 = suffix:sub(1, 2)
		local suffix_2 = suffix:sub(3, 4)
		local suffix_3 = suffix:sub(5, 6)
		random_mac = "C0:4A:00:" .. suffix_1 .. ":" .. suffix_2 .. ":"  .. suffix_3
		dbg.print("lan random mac value:" .. random_mac)
		return random_mac
	else
		dbg.print("lan random suffix len:" .. #suffix)
		return lan_default_mac
	end
end

local function get_real_ifname(iface)
	if iface == "lan" then
		return lan_realif
	else
		return wan_realif
	end
end

local function get_orig_mac(iface)
    local mac = nil

    mac = sys.exec("network_get_firm " .. iface)
    mac = mac:gsub("-", ":")
    return mac
end

local function set_iface_mac(iface)
    local mac     = get_orig_mac(iface)
    local secname = nil
    local ifname  = uci_r:get("network", iface, "ifname")
    local devname = nil
    local realif = get_real_ifname(iface)
    --local clonetype = uci_r:get("protocol", "wan", "mactype") or "default"
    local factory = uci_r:get("factory", "factorymode", "enable") or "no"
    
    --We only implemented LAN random MAC here, not compatible with WAN random MAC
    if mac:gsub("%s", "") == lan_default_mac and factory == "yes" then
	mac = factory_random_mac_lan()
	dbg.print("mac:" .. mac)
    end

    uci_r:foreach("network", "device",
    function(section)
        local name = section["name"]

        if name == realif then
            secname = section[".name"]
            devname = name
        end 
    end)

    if devname == nil then
        secname = uci_r:section("network", "device", nil, {
            name = realif, 
            enabled = '1',
        })
    end
    
                    
    local clonetype = uci_r:get("protocol", "wan", "mactype") or "default"

    if secname then
        local secmac = uci_r:get("network", secname, "macaddr")
		
        if secmac == nil then
            uci_r:set("network", secname, "macaddr", mac)
            changed = true
        elseif iface == "lan" then
            if mac:upper() ~= secmac:upper() then
                uci_r:set("network", secname, "macaddr", mac)
		changed = true
            end   
        elseif iface == "wan" then
            if (clonetype == "default") and (mac:upper() ~= secmac:upper()) then
                uci_r:set("network", secname, "macaddr", mac)
                changed = true
            end
        end
    end


    if iface == "wan" then
        local wanmac = uci_r:get("network", "wan", "macaddr")
        if not wanmac or (clonetype == "default" and wanmac ~= mac) then
            uci_r:set("network", "wan", "macaddr", mac)
            changed = true
        end
    end
end

function main()
	local mode = uci_r:get("sysmode", "sysmode", "mode")

	set_iface_mac("lan")
	set_iface_mac("wan")

    if changed == true then
        uci_r:commit_without_write_flash("network")
    end
end

main()
