#!/bin/sh
. /lib/functions.sh

# wifi button for bcm47094 (c5300)
# this script will cover the common script of wireless-button packge.

state="off"

#set soft_state on when wifi soft swich status of any band on
soft_state="off"
#set old_soft_state on when last wifi soft swich status of any band on
old_soft_state="off"

#uci commit flag
need_commit=0

wireless_schedule_state_reset() {
    uci_toggle_state wireless_schedule 2g_disable "" 0
    uci_toggle_state wireless_schedule 5g_disable "" 0
}

wifi_get_soft_state() {
	local enable
	local lastenable
	local mode
	local guest
	local iface="$1"

	config_get_bool enable $1 enable
	config_get_bool lastenable $1 lastenable
	config_get mode $1 mode
	config_get guest $1 guest
	if [ "$mode" = "ap" -a -z "$guest" ]; then
		if [ "$enable" = "1" ]; then
			soft_state="on"
		fi
		
		if [ "$lastenable" = "1" ]; then
			old_soft_state="on"
		fi
	fi
}

wifi_set_led() {
	local band="$1"
	local ledstatus="$2"
	local ledtype=""

	if [ "$band" = "2g" ]; then
		ledtype="WIFI2G"
	elif [ "$band" = "5g" ]; then
		ledtype="WIFI5G"
	elif [ "$band" = "wps" ]; then
		ledtype=" WPS"
	fi
	
	if [ -n "$ledtype" -a -n "$ledstatus" ]; then
		if [ "$ledstatus" = "on" ]; then
			ledcli "${ledtype}_ON"
		else
			ledcli "${ledtype}_OFF"
		fi
	fi
}

wifi_log_band_state() {
	local iface="$1"
	local dev="$2"
	local value="$3"
	local band
	local tmp_s

	config_get mode $iface mode
	config_get guest $iface guest
	config_get device $iface device
	if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
		config_get enable $iface enable
		config_get band $dev band

		if [ "$value" != "on" ]; then
			tmp_s="OFF"
		else
			if [ "$enable" = "on" ]; then
				tmp_s="ON"
			else
				tmp_s="OFF"
			fi
		fi
		if [ "$band" = "2g" ]; then
			logwrite $$ wireless WIRELESS_SWITCH_SET "2.4G" "$tmp_s"
		elif [ "$band" = "5g" ]; then
			logwrite $$ wireless WIRELESS_SWITCH_SET "5G" "$tmp_s"
		fi
	fi
}

wifi_set_all_soft_state() {
	local enable
	local lastenable
	local mode
	local guest
	local band
	local device
	local tmp_s
	local iface="$1"
	local dev="$2"
	local value="$3"

	config_get enable $iface enable
	config_get lastenable $iface lastenable
	config_get mode $iface mode
	config_get guest $iface guest
	config_get device $iface device
	if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
		if [ "$value" != "on" ]; then
			value="off"
			tmp_s="OFF"
		else
			tmp_s="ON"
		fi

		config_get band $dev band

		if [ "$enable" != "$value" ]; then
			uci set wireless.$iface.enable="$value"
			uci set wireless.$dev.disabled_all="$enable"
			need_commit=1
		fi
		if [ "$lastenable" != "$enable" ]; then
			uci set wireless.$iface.lastenable="$enable"
			need_commit=1
		fi

		# log the band state
		if [ "$band" = "2g" ]; then
			logwrite $$ wireless WIRELESS_SWITCH_SET "2.4G" "$tmp_s"
		elif [ "$band" = "5g" ]; then
			logwrite $$ wireless WIRELESS_SWITCH_SET "5G" "$tmp_s"
		fi

		wifi_set_led "$band" "$value"
	fi
}

wifi_restore_soft_state() {
	local enable
	local lastenable
	local mode
	local guest
	local band
	local tmp_s
	local iface="$1"
	local dev="$2"

	config_get enable $iface enable
	config_get lastenable $iface lastenable
	config_get mode $iface mode
	config_get guest $iface guest
	config_get device $iface device
	if [ "$mode" = "ap" -a -z "$guest" -a "$dev" = "$device" ]; then
		config_get band $dev band

		if [ -z "$lastenable" ]; then
			lastenable="off"
		fi
		
		if [ "$enable" != "$lastenable" ]; then
			uci set wireless.$iface.enable="$lastenable"
			uci set wireless.$dev.disabled_all="$enable"
			need_commit=1
		fi

		# log the band state
		if [ "$lastenable" != "on" ]; then
			tmp_s="OFF"
		else
			tmp_s="ON"
		fi
		if [ "$band" = "2g" ]; then
			logwrite $$ wireless WIRELESS_SWITCH_SET "2.4G" "$tmp_s"
		elif [ "$band" = "5g" ]; then
			logwrite $$ wireless WIRELESS_SWITCH_SET "5G" "$tmp_s"
		fi

		wifi_set_led "$band" "$lastenable"
	fi
}

wifi_state_obtain() {
	local disabled
	local dev="$1"
	config_get_bool disabled $1 disabled
	if [ "$soft_state" = "on" ]; then
		if [ "$disabled" = "0" ]; then
			state="on"
			[ -f /usr/bin/ledctrl ] && {
				ledcli WIFI2G_OFF
				ledcli WIFI5G_OFF
				ledcli WPS_OFF
			}
			# log the band state
			config_foreach wifi_log_band_state wifi-iface "$dev" "off"
		else
			[ -f /usr/bin/ledctrl ] && {
				ledcli WIFI2G_ON
				ledcli WIFI5G_ON
			}
			# log the band state
			config_foreach wifi_log_band_state wifi-iface "$dev" "on"
		fi
	else
		# if the old soft swich status all closed, set it open
		if [ "$old_soft_state" != "on" ]; then
			config_foreach wifi_set_all_soft_state wifi-iface "$dev" "on"
		else
			config_foreach wifi_restore_soft_state wifi-iface "$dev"
		fi
		
	fi
}

wifi_state_set() {
	local dev="$1"
	uci set wireless.$dev.disabled=$state
	if [ "$state" == "on" ]
	then
	    uci set wireless.$dev.disabled_by="0"
	fi
	need_commit=1
}

# log the button action
logwrite $$ wireless WIRELESS_BUTTON_SET "pressed"

dut_is_cal_when_boot(){
	/sbin/is_cal
}

# do wifi button check in wireless_button package, no need to do it here
#if [ $(dut_is_cal_when_boot) = "false" ]; then
#	echo "wifi button will lose function now!" >/dev/console
#	echo "wifi button check mask is 0x02,see tddp_cmd.h">/dev/console
#	if [ ! -e /tmp/btn_check ];then
#		echo 0 > /tmp/btn_check
#	fi
#	ret=$(cat /tmp/btn_check)
#	ret=$(($ret | 0x2))
#	echo $ret > /tmp/btn_check
#else
	config_load wireless
	config_foreach wifi_get_soft_state wifi-iface
	config_foreach wifi_state_obtain wifi-device
	config_foreach wifi_state_set wifi-device
	wireless_schedule_state_reset

	if [ $need_commit -eq 1 ]; then
		wifi_commit
	fi

	config_load sysmode
	config_get sysmode sysmode mode "router"
	local support_onemesh=$(uci get profile.@onemesh[0].onemesh_support -c "/etc/profile.d" -q)
	if [ "$support_onemesh" = "yes" -a "$sysmode" = "router" ]; then
		lua -e 'require("luci.controller.admin.onemesh").sync_wifi_all()'
	fi

	wifi reload
#fi
