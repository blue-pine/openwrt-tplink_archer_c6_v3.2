#!/usr/bin/lua

local firm = require "luci.controller.admin.firmware"
local cry = require "luci.model.crypto"
local configtool = require "luci.sys.config"
local fs = require "luci.fs"
local util = require "luci.util"
local uci = require "luci.model.uci"
local uci_r = uci.cursor()

function get_partition_size(partition_name)
    local PARTITION_FILE = "/tmp/partition.txt"
    local partition_size = 0
    os.execute("nvrammanager -s > "..PARTITION_FILE)
    local fp = io.open(PARTITION_FILE, 'r')
    if nil ~= fp then
        repeat
            local line = fp:read("*line")
            if nil ~= line then
                local i, j
                i, j = string.find(line, partition_name)
                if nil ~= i and nil ~= j then
                    local pat = "(.-),()"
                    local size_pat = "size%s*=%s*(.-)%s*Bytes"
                    local part, pos, value
                    for part, pos in string.gfind(line, pat) do
                        i, j = string.find(part, "size")
                        if nil ~= i and nil ~= j then
                            _,_,value = string.find(part, size_pat)
                            partition_size = tonumber(value)
                        end
                    end
                end
            end
        until nil == line or partition_size > 0
    end
    os.execute("rm "..PARTITION_FILE)
    return partition_size
end

-- Restore Config
local backup_max_size
local filesize
local read_backup_userconf = io.open("/tmp/read-backup-userconf.bin", "r")
local read_backup_userconf_length = read_backup_userconf:seek("end")
read_backup_userconf:close()

--考虑到有多个分区或者user-config分区大于16K的情况，去掉上限限制
--if read_backup_userconf_length <= 16 or read_backup_userconf_length > 16384 then
if read_backup_userconf_length <= 16 then 		
	luci.sys.exec("rm -f /tmp/read-backup-userconf.bin")
	return false
end

local product_info_md5 = firm.md5_product_info()
local product_name_md5 = firm.md5_product_name() --兼容出货软件
cry.dec_file_entry("/tmp/read-backup-userconf.bin", "/tmp/tmp-backup-userconf.bin")
local tmp_userconf_fd = io.open("/tmp/tmp-backup-userconf.bin", "r")
luci.sys.exec("rm -f /tmp/read-backup-userconf.bin")

local t = {}
for index = 1, 16 do
	local num = tmp_userconf_fd:read(1)
	if num == nil then
		tmp_userconf_fd:close()
		luci.sys.exec("rm -f /tmp/tmp-backup-userconf.bin")
		return false
	end   
	local number = string.format("%02x", string.byte(num))
	t[#t + 1] = number
end
local read_md5 = table.concat(t)
tmp_userconf_fd:close()

if product_info_md5 == read_md5 or product_name_md5 == read_md5 then
	--("md5 check success")
else
	--("md5 check failed")
	luci.sys.exec("rm -f /tmp/tmp-backup-userconf.bin")
	return false
end

luci.sys.exec("dd if=/tmp/tmp-backup-userconf.bin of=/tmp/read-backup-userconf.bin ibs=1 skip=16")
luci.sys.exec("rm -f /tmp/tmp-backup-userconf.bin")

-- 恢复extern分区, 如有特殊情况的分区，再特殊处理
local extern_partitions = uci_r:get_profile("backup_restore", "extern_partition") or nil
if extern_partitions ~= nil then
	extern_partitions = util.split(extern_partitions, " ")
	os.execute("mkdir /tmp/restore >/dev/null 2>&1")
	--解压
	os.execute("tar -xf /tmp/read-backup-userconf.bin -C /tmp/restore >/dev/null 2>&1")

	for i, v in ipairs(extern_partitions) do
		if v ~= nil then
			local file, err = io.open("/tmp/restore/ori-backup-" .. v .. ".bin",'r')
			if file ~= nil then
				filesize = fs.stat("/tmp/restore/ori-backup-" .. v .. ".bin").size
				local partition_name = string.gsub(v, "%-", "%%-")
				local backup_max_size = get_partition_size(partition_name)
				if filesize > 0 and filesize <= backup_max_size then
					luci.sys.exec("nvrammanager -e -p " .. v .. " >/dev/null 2>&1")
					luci.sys.exec("nvrammanager -w /tmp/restore/ori-backup-" .. v .. ".bin -p ".. v .. " >/dev/null 2>&1")
				else
					luci.sys.exec("nvrammanager -e -p " .. v .. " >/dev/null 2>&1")
				end
			end
		end
	end		
	cry.dec_file_entry("/tmp/restore/ori-backup-user-config.bin", "/tmp/ori-backup-userconf.xml")
else
	cry.dec_file_entry("/tmp/read-backup-userconf.bin", "/tmp/ori-backup-userconf.xml")
end

-- not restore cloud config to flash              
luci.sys.exec("mkdir -p /tmp/restorecfg /tmp/userconfig")
configtool.xmlToFile("/tmp/ori-backup-userconf.xml", "/tmp/restorecfg")
luci.sys.exec("rm -f /tmp/ori-backup-userconf.xml")

-- read flash config
luci.sys.exec("nvrammanager -r /tmp/ori-userconf.bin -p user-config >/dev/null 2>&1")
cry.dec_file_entry("/tmp/ori-userconf.bin", "/tmp/ori-userconf.xml")
configtool.xmlToFile("/tmp/ori-userconf.xml", "/tmp/userconfig")
luci.sys.exec("rm -f /tmp/ori-userconf.bin;rm -f /tmp/ori-userconf.xml")

-- not restore cloud info config
local hide_files = {"accountmgnt", "cloud_config"}
for _, f in ipairs(hide_files) do 
	luci.sys.exec("cp -f /tmp/userconfig/config/" .. f .. "   /tmp/restorecfg/config/")
end 

-- recreate xml config files
configtool.convertFileToXml("/tmp/restorecfg/config", "/tmp/ori-backup-userconf.xml")
cry.enc_file_entry("/tmp/ori-backup-userconf.xml", "/tmp/read-backup-userconf.bin")
luci.sys.exec("rm -rf /tmp/restorecfg;rm -rf /tmp/userconfig")

filesize = fs.stat("/tmp/read-backup-userconf.bin").size
backup_max_size = get_partition_size("user%-config")
if filesize <= 0 or filesize > backup_max_size then
	luci.sys.exec("rm -rf /tmp/ori-backup-userconf.xml /tmp/restore /tmp/read-backup-userconf.bin >/dev/null 2>&1")
	return false
end
	
local decrypt_userconf = io.open("/tmp/ori-backup-userconf.xml", "r")
if decrypt_userconf:read(6) == '<?xml 'then
	decrypt_userconf:close()
	configtool.xmlToFile("/tmp/ori-backup-userconf.xml", "/tmp")
	luci.sys.exec("nvrammanager -e -p user-config >/dev/null 2>&1")
	luci.sys.exec("nvrammanager -w /tmp/read-backup-userconf.bin -p user-config >/dev/null 2>&1")
	luci.sys.exec("rm -rf /tmp/ori-backup-userconf.xml /tmp/restore /tmp/read-backup-userconf.bin >/dev/null 2>&1")
else
	decrypt_userconf:close()
	luci.sys.exec("rm -rf /tmp/ori-backup-userconf.xml /tmp/restore /tmp/read-backup-userconf.bin >/dev/null 2>&1")
	return false
end


luci.sys.call("[ -f /sbin/board_restore ] && board_restore")
firm.fork_reboot()
return true