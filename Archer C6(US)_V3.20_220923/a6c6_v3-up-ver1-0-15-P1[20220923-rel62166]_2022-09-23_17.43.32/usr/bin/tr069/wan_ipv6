#!/usr/bin/lua

local bit       = require "bit"
local nixio     = require "nixio"
local socket    = require "socket"
local json      = require "luci.json"
local uci       = require "luci.model.uci"
local ctypes    = require "luci.model.checktypes"
local appnet    = require "luci.model.network"
local ctl       = require "luci.model.controller"
local dbg       = require "luci.tools.debug"
local network   = require "luci.controller.admin.network"
local dhcps     = require "luci.controller.admin.dhcps"
local wireless  = require "luci.controller.admin.wireless"
local security  = require "luci.controller.admin.security_settings"
local nat       = require "luci.controller.admin.nat"
local iptv      = require "luci.controller.admin.iptv"
local _ubus     = require("ubus").connect()

local TEMP_UCI_PATH = "/tmp/tr069/"
local uci_r     = uci.cursor()
local uci_t     = uci.cursor(TEMP_UCI_PATH)

debug_on = true
config = "check"

uci_t:foreach(config, "params",
    function(section)               
        uci_t:delete(config, section[".name"])                
    end
)

local tmp = {}
uci_t:section(config, "params", "result", tmp)
uci_t:set(config, "result", "set_result", "0")

local function form_dump(form)
    if debug_on == true then
        dbg.print("================form================")
        dbg.dumptable(form)
        dbg.print("====================================")
    end
end

local function ipv6_enable(tr_form)
    local info = {}
    local form_r = {}
    local form_w = {}
    
    form_r.form = "wan_ipv6_status"
    form_r.operation = "read"
    info = network.dispatch(form_r)
    if info == nil or info.success ~= true then 
        dbg.print("prep get info fail!!")
        return
    end
    local data = info.data

    form_w.enable = tr_form.param1
    form_w.form = "wan_ipv6_status"
    form_w.operation = "write"
    
    local result = network.dispatch(form_w)
    if result.success == true then
        uci_t:set(config, "result", "set_result", "1")
    end
    dbg.print("ipv6_enable set result: " .. tostring(result.success))
end

local function ipv6_static(tr_form, type)
    local info = {}
    local form_w = {}
    local form_r = {}

    form_r.form = "wan_ipv6_static"
    form_r.operation = "read"
    info = network.dispatch(form_r)
    if info == nil or info.success ~= true then 
        dbg.print("prep get info fail!!")
        return
    end
    local wan_info = info.data
    if wan_info.ip6gw == "" then 
        wan_info.ip6gw = "240:3A33d:9006:6900::1"
    end
    if wan_info.ip6addr == "" then 
        wan_info.ip6addr = "240:3A33d:9006:6900::2"
    end
    if wan_info.pri_dns == "" then 
        wan_info.pri_dns= "240:3A33d:9006:6900::11"
    end
    if wan_info.snd_dns == "" then 
        wan_info.snd_dns= "240:3A33d:9006:6900::12"
    end

    form_w.form = "wan_ipv6_static"
    form_w.operation = "write"
    form_w.conntype = "staticv6"
    form_w.ip6addr = wan_info.ip6addr
    form_w.ip6gw = wan_info.ip6gw
    form_w.pri_dns = wan_info.pri_dns
    form_w.snd_dns = wan_info.snd_dns
    form_w.mtu = wan_info.mtu
    if type == "ip" then
        form_w.ip6addr = tr_form.param1
    end
    if type == "gw" then
        form_w.ip6gw = tr_form.param1
    end
    if type == "dns" then
        if tr_form.param1 == nil then
            form_w.dns_mode = "dynamic"
        else
            form_w.dns_mode = "static"
            local pridns = ""
            local snddns = ""
            local findLastIndex = string.find(tr_form.param1, ",", 0)
            if not findLastIndex then
                pridns = tr_form.param1
            else
                pridns = string.sub(tr_form.param1, 0, findLastIndex-1)
                snddns = string.sub(tr_form.param1, findLastIndex+1, string.len(tr_form.param1))
            end
            form_w.pri_dns = pridns
            form_w.snd_dns = snddns
        end
    end
    form_dump(form_w)
    
    local result = network.dispatch(form_w)
    if result.success == true then
        uci_t:set(config, "result", "set_result", "1")
    end
    dbg.print("ipv6_static_" .. type .." set result: " .. tostring(result.success))
end

local function ipv6_static_enable(tr_form)
    ipv6_static(tr_form, "")
end

local function ipv6_static_ip(tr_form)
    ipv6_static(tr_form, "ip")
end

local function ipv6_static_gw(tr_form)
    ipv6_static(tr_form, "gw")
end

local function ipv6_static_dns(tr_form)
    ipv6_static(tr_form, "dns")
end

local function ipv6_dhcpc(tr_form, type)
    local info = {}
    local form_w = {}
    local form_r = {}

    form_r.form = "wan_ipv6_dynamic"
    form_r.operation = "read"
    info = network.dispatch(form_r)
    if info == nil or info.success ~= true then 
        dbg.print("prep get info fail!!")
        return
    end
    local wan_info = info.data

    form_w.form = "wan_ipv6_dynamic"
    form_w.operation = "write"
    form_w.conntype = "dhcp6c"
    form_w.ip6addr = wan_info.ip6addr
    form_w.prefix = wan_info.prefix
    form_w.pri_dns = wan_info.pri_dns
    form_w.snd_dns = wan_info.snd_dns
    form_w.ip_config = wan_info.ip_config
    form_w.ip_mode = wan_info.ip_mode
    form_w.dns_mode = wan_info.dns_mode
    form_w.dyn_pridns = wan_info.dyn_pridns
    form_w.dyn_snddns = wan_info.dyn_snddns
    form_w.static_pridns = wan_info.static_pridns
    form_w.static_snddns = wan_info.static_snddns
    form_w.conn_status = wan_info.conn_status
    if type == "dns" then
        if tr_form.param1 == nil then
            form_w.dns_mode = "dynamic"
        else
            form_w.dns_mode = "static"
            local pridns = ""
            local snddns = ""
            local findLastIndex = string.find(tr_form.param1, ",", 0)
            if not findLastIndex then
                pridns = tr_form.param1
            else
                pridns = string.sub(tr_form.param1, 0, findLastIndex-1)
                snddns = string.sub(tr_form.param1, findLastIndex+1, string.len(tr_form.param1))
            end
            form_w.static_pridns = pridns
            form_w.static_snddns = snddns
        end
    end
    if type == "addressingtype" then
        form_w.ip_config = tr_form.param1
    end
    form_dump(form_w)
    
    local result = network.dispatch(form_w)
    if result.success == true then
        uci_t:set(config, "result", "set_result", "1")
    end
    dbg.print("ipv6_dhcpc" .. type .." set result: " .. tostring(result.success))
end

local function ipv6_dhcpc_enable(tr_form)
    ipv6_dhcpc(tr_form, "")
end

local function ipv6_dhcpc_dns(tr_form)
    ipv6_dhcpc(tr_form, "dns")
end

local function ipv6_dhcpc_addressingtype(tr_form)
    ipv6_dhcpc(tr_form, "addressingtype")
end

local function ipv6_pppoe(tr_form, type)
    local info = {}
    local form_w = {}
    local form_r = {}

    form_r.form = "wan_ipv6_pppoe"
    form_r.operation = "read"
    info = network.dispatch(form_r)
    if info == nil or info.success ~= true then 
        dbg.print("prep get info fail!!")
        return
    end
    local wan_info = info.data
    if wan_info.username == "" then 
        wan_info.username = "pppoev6"
    end
    if wan_info.password == "" then 
        wan_info.password = "pppoev6"
    end

    form_w.form = "wan_ipv6_pppoe"
    form_w.operation = "connect"
    form_w.conntype = "pppoev6"
    form_w.username = wan_info.username
    form_w.password = wan_info.password
    form_w.dns_mode = wan_info.dns_mode
    form_w.static_pridns = wan_info.static_pridns
    form_w.static_snddns = wan_info.static_snddns
    form_w.ip6addr = wan_info.ip6addr
    form_w.pppshare = wan_info.pppshare
    form_w.pppflag = wan_info.pppflag
    form_w.ip_config = wan_info.ip_config
    form_w.specific_ip = wan_info.specific_ip
    form_w.ip_mode = wan_info.ip_mode
    form_w.conn_status = wan_info.conn_status
    if type =="username" then
        form_w.username = tr_form.param1
    end
    if type =="password" then
        form_w.password = tr_form.param1
    end
    if type == "dns" then
        if tr_form.param1 == nil then
            form_w.dns_mode = "dynamic"
        else
            form_w.dns_mode = "static"
            local pridns = ""
            local snddns = ""
            local findLastIndex = string.find(tr_form.param1, ",", 0)
            if not findLastIndex then
                pridns = tr_form.param1
            else
                pridns = string.sub(tr_form.param1, 0, findLastIndex-1)
                snddns = string.sub(tr_form.param1, findLastIndex+1, string.len(tr_form.param1))
            end
            form_w.static_pridns = pridns
            form_w.static_snddns = snddns
        end
    end
    if type == "specifiedip" then
        form_w.ip_config = "specified"
        form_w.specific_ip = tr_form.param1
    end
    if type == "addressingtype" then
        form_w.ip_config = tr_form.param1
    end
    if type == "pdenabled" then
        form_w.ip_mode = tr_form.param1
    end
    form_dump(form_w)
    
    local result = network.dispatch(form_w)
    if result.success == true then
        uci_t:set(config, "result", "set_result", "1")
    end
    dbg.print("wan_ipv6_pppoe" .. type .." set result: " .. tostring(result.success))
end

local function ipv6_pppoe_enable(tr_form)
    ipv6_pppoe(tr_form, "")
end

local function ipv6_pppoe_username(tr_form)
    ipv6_pppoe(tr_form, "username")
end

local function ipv6_pppoe_password(tr_form)
    ipv6_pppoe(tr_form, "password")
end

local function ipv6_pppoe_dns(tr_form)
    ipv6_pppoe(tr_form, "dns")
end

local function ipv6_pppoe_specifiedip(tr_form)
    ipv6_pppoe(tr_form, "specifiedip")
end

local function ipv6_pppoe_addressingtype(tr_form)
    ipv6_pppoe(tr_form, "addressingtype")
end

local function ipv6_pppoe_pdenabled(tr_form)
    ipv6_pppoe(tr_form, "pdenabled")
end

local function ipv6_6to4tunnel(tr_form, type)
    local info = {}
    local form_w = {}
    local form_r = {}

    form_r.form = "wan_ipv6_tunnel"
    form_r.operation = "read"
    info = network.dispatch(form_r)
    if info == nil or info.success ~= true then 
        dbg.print("prep get info fail!!")
        return
    end
    local wan_info = info.data

    form_w.form = "wan_ipv6_tunnel"
    form_w.operation = "write"
    form_w.conntype = "6to4"
    form_w.ipaddr = wan_info.ipaddr
    form_w.netmask = wan_info.netmask
    form_w.gateway = wan_info.gateway
    form_w.tunnel_addr = wan_info.tunnel_addr
    form_w.dns_mode = wan_info.dns_mode
    form_w.pri_dns = wan_info.pri_dns
    form_w.snd_dns = wan_info.snd_dns
    if type == "dns" then
        if tr_form.param1 == nil then
            form_w.dns_mode = "dynamic"
        else
            form_w.dns_mode = "static"
            local pridns = ""
            local snddns = ""
            local findLastIndex = string.find(tr_form.param1, ",", 0)
            if not findLastIndex then
                pridns = tr_form.param1
            else
                pridns = string.sub(tr_form.param1, 0, findLastIndex-1)
                snddns = string.sub(tr_form.param1, findLastIndex+1, string.len(tr_form.param1))
            end
            form_w.pri_dns = pridns
            form_w.snd_dns = snddns
        end
    end
    form_dump(form_w)
    
    local result = network.dispatch(form_w)
    if result.success == true then
        uci_t:set(config, "result", "set_result", "1")
    end
    dbg.print("ipv6_6to4tunnel" .. type .." set result: " .. tostring(result.success))
end

local function ipv6_6to4tunnel_enable(tr_form)
    ipv6_6to4tunnel(tr_form, "")
end

local function ipv6_6to4tunnel_dns(tr_form)
    ipv6_6to4tunnel(tr_form, "dns")
end

local function ipv6_passthrough(tr_form, type)
    local info = {}
    local form_w = {}
    local form_r = {}

    form_r.form = "wan_ipv6_pass"
    form_r.operation = "read"
    info = network.dispatch(form_r)
    if info == nil or info.success ~= true then 
        dbg.print("prep get info fail!!")
        return
    end
    local wan_info = info.data

    form_w.form = "wan_ipv6_pass"
    form_w.operation = "write"
    form_w.conntype = "passthrough"
    form_w.type = wan_info.type
    form_dump(form_w)
    
    local result = network.dispatch(form_w)
    if result.success == true then
        uci_t:set(config, "result", "set_result", "1")
    end
    dbg.print("ipv6_pass" .. type .." set result: " .. tostring(result.success))
end

local function ipv6_passthrough_enable(tr_form)
    ipv6_passthrough(tr_form, "")
end

local dispatch_tbl = {
    ipv6_enable = {
        ["write"] = {cb = ipv6_enable}
    },
    ipv6_static_enable = {
        ["write"] = {cb = ipv6_static_enable}
    },
    ipv6_static_ip = {
        ["write"] = {cb = ipv6_static_ip}
    },
    ipv6_static_gw = {
        ["write"] = {cb = ipv6_static_gw}
    },
    ipv6_static_dns = {
        ["write"] = {cb = ipv6_static_dns}
    },
    ipv6_dhcpc_enable = {
        ["write"] = {cb = ipv6_dhcpc_enable}
    },
    ipv6_dhcpc_dns = {
        ["write"] = {cb = ipv6_dhcpc_dns}
    },
    ipv6_dhcpc_addressingtype = {
        ["write"] = {cb = ipv6_dhcpc_addressingtype}
    },
    ipv6_pppoe_enable = {
        ["write"] = {cb = ipv6_pppoe_enable}
    },
    ipv6_pppoe_username = {
        ["write"] = {cb = ipv6_pppoe_username}
    },
    ipv6_pppoe_password = {
        ["write"] = {cb = ipv6_pppoe_password}
    },
    ipv6_pppoe_dns = {
        ["write"] = {cb = ipv6_pppoe_dns}
    },
    ipv6_pppoe_specifiedip = {
        ["write"] = {cb = ipv6_pppoe_specifiedip}
    },
    ipv6_pppoe_addressingtype = {
        ["write"] = {cb = ipv6_pppoe_addressingtype}
    },
    ipv6_pppoe_pdenabled = {
        ["write"] = {cb = ipv6_pppoe_pdenabled}
    },
    ipv6_6to4tunnel_enable = {
        ["write"] = {cb = ipv6_6to4tunnel_enable}
    },
    ipv6_6to4tunnel_dns = {
        ["write"] = {cb = ipv6_6to4tunnel_dns}
    },
    ipv6_passthrough_enable = {
        ["write"] = {cb = ipv6_passthrough_enable}
    }
}

local function dispatch(tr_form)
    return ctl.dispatch(dispatch_tbl, tr_form)
end

local tr_form = {}
tr_form.form = arg[1]
tr_form.operation = "write"
for i = 2, 100, 1 do
    if arg[i] ~= nil then
        tr_form["param" .. tostring(i - 1)] = arg[i]
    else
        break
    end
end

dispatch(tr_form)
uci_t:commit_without_write_flash(config)
