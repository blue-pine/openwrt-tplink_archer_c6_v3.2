#!/usr/bin/lua

local cloud_https = require "cloud_req.cloud_https"
local cloud_getFirmware = require "cloud_req.cloud_getFirmware"
local cloud_account  = require "cloud_req.cloud_account"
local cloud_comm = require "cloud_req.cloud_comm"
local sys   = require "luci.sys"
local fs    = require "luci.fs"
local uci   = require("luci.model.uci")
local uci_r = uci.cursor()
local dbg   = require "luci.tools.debug"

local need_checkupgrade = uci_r:get("cloud_config", "device_status", "need_checkupgrade") or "0"
local need_unbind = uci_r:get("cloud_config", "device_status", "need_unbind") or "0"
local need_getsn = uci_r:get("cloud_config", "device_status", "need_getsn") or "1"
local featureinfo_support = uci_r:get_profile("cloud", "featureinfo_support")

--[[
	NOTE: 
	At first, check internet status every 5 minutes until online.
]]
local is_online = 0
local ONLINE_STATUS_FILE="/tmp/is_online"

while true do
	if nixio.fs.access(ONLINE_STATUS_FILE) then
		local fp = io.open(ONLINE_STATUS_FILE, "r")
		is_online = fp:read(1)
		fp:close()

		if tonumber(is_online) == 1 then
			break
		end
	end
	nixio.nanosleep(5)
end

-- check the cloud service status
sys.fork_exec("cloud_status_check")

if need_checkupgrade == "1" or need_unbind == "1" or need_getsn == "1" then
	local base_time_s = 60 --base time 1 minute
	local getsn_done = false
	local unbind_done = false
	local checkupgrade_done = false
	local ret, error_code

	--try 100 times at most and
	for i = 0, 99 do
		--need to init uci every time, because the status may be changed
		uci_r = uci.cursor()

		--try 10 times and 1 minutes interval for trying to get sn code
		--time interval as 1 2 3 4 5 ... minutes
		need_getsn = uci_r:get("cloud_config", "device_status", "need_getsn") or "1"
		if need_getsn == "1"
			and getsn_done == false
		then
			if i < 10 then
				local req = {}
				req.params = {}
				req.method = "getDeviceSn"
				req.params.deviceId = cloud_comm.TrimStr(sys.exec("getfirm DEV_ID"))
				local re, data = cloud_comm.send_request_sync(req, 5000, 1)

				if re == 0 and data.error_code == 0 then 
					if data.result and data.result.sn then
						uci_r:set("cloud_config", "device_status", "serial_number", data.result.sn)
						uci_r:set("cloud_config", "device_status", "need_getsn", "0")
						uci_r:commit("cloud_config")
						os.execute("/etc/init.d/cwmp restart")
						getsn_done = true
					else
						dbg.printf("[cloud_https_bootreq]:Fail to get device serial number.")
					end
				end
			else
				getsn_done = true
			end
		end

		--try 10 times and 2 minutes interval for trying to unbind
		--time interval as 3 6 9 12 15 ... minutes
		need_unbind = uci_r:get("cloud_config", "device_status", "need_unbind") or "0"
		if need_unbind == "1"
			and unbind_done == false
			and i % 3 == 0
		then
			if i / 3 < 10 then
				if featureinfo_support == "yes" then
					error_code = cloud_account.unbind_deviceWithFeatureInfo()
				else
					error_code = cloud_account.unbind_device()
				end
				if error_code == 0 then
					unbind_done = true
				end
			else
				unbind_done = true
			end
		end

		--try 5 times and 5 minutes interval for checking upgrade
		--time interval as 5 10 15 20 25 minutes
		need_checkupgrade = uci_r:get("cloud_config", "device_status", "need_checkupgrade") or "0"
		if need_checkupgrade == "1"
			and checkupgrade_done == false
			and i % 5 == 0
		then
			if i / 5 < 5 then
				ret, error_code = cloud_getFirmware.get_fwlist()
				if ret then
					checkupgrade_done = true
				end
			else
				checkupgrade_done = true
			end
		end

		--if illgal device, just break
		if false == cloud_https.check_device() then
			break
		end

		--all done
		if unbind_done == true
			and checkupgrade_done == true
		then
			break
		end

		nixio.nanosleep(base_time_s)
	end
end

