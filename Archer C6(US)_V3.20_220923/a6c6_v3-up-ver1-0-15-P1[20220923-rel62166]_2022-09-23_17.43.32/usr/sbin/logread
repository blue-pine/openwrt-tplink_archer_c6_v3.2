#!/usr/bin/lua
--[[
Copyright(c) 2008-2013 Shenzhen TP-LINK Technologies Co.Ltd.

File    : logread
Details : System log reader.
Author  : Ye Qianchuan <yeqianchuan@tp-link.net>
Version : 1.0
Date    : 4 Mar, 2014
]]--

local nw = require "luci.model.nwcache"
local uci_r = require("luci.model.uci").cursor()
local util = require "luci.util"
local allow_all
local lang
local proj
local prio
local crlf = "\n"

function usage()
    -- TODO
end

local function eol()
    io.write(crlf)
end

local function split(srcString, dlmString)
    local startIndex = 1
    local splitIndex = 1
    local splitArray = {}
    while true do
        local endIndex = string.find(srcString, dlmString, startIndex)
        if not endIndex then
            splitArray[splitIndex] = string.sub(srcString, startIndex, string.len(srcString))
            break
        end
        splitArray[splitIndex] = string.sub(srcString, startIndex, endIndex-1)
        startIndex = endIndex + string.len(dlmString)
        splitIndex = splitIndex + 1
    end
    return splitArray
end

local function get_lan_ipv4()
    local nw = nw.init()
    local net = nw:get_network("lan")
    local ifc = net and net:get_interface()
    local netmaskcfg = uci_r:get("network", "lan", "netmask") or "0.0.0.0"

    macaddr = ifc and ifc:mac() or "00:00:00:00:00:00"
    local data = {
        macaddr = string.upper(macaddr),
        ipaddr = net and net:ipaddr() or "0.0.0.0",
        netmask = net and net:netmask() or netmaskcfg
    }

    return data
end

local function get_wan_mac()
    local nw = nw.init()
    local net = nw:get_network("wan")
    local ifc = net and net:get_interface()
    local cur_mac = ifc and ifc:mac() or "00:00:00:00:00:00"
    local dft_mac = "00:00:00:00:00:00"

    if cur_mac == dft_mac then
        -- wan was down
        cur_mac = uci_r:get("network", "wan", "macaddr") or dft_mac
    end

    return cur_mac
end

local function get_wan_ipv4()
    local nw = nw.init()
    local interface
    local proto = uci_r:get("network", "wan", "proto")
    local wan_type = uci_r:get("network", "wan", "wan_type")

    if not wan_type then
        wan_type = proto
    end

    if wan_type == "pppoeshare" or wan_type == "pppoe" 
       or wan_type == "pptp" or wan_type == "l2tp" then
        interface = "internet"
    else
        interface = "wan"
    end

    local net = nw:get_network(interface) or nil
    local dnsaddrs = net and net:dnsaddrs() or {}
	local ifc = net and net:get_interface()
    local data = {
        wan_type = wan_type,
        macaddr = string.upper(get_wan_mac()), 
        ipaddr  = net and net:ipaddr() or "0.0.0.0",
        netmask = net and net:netmask() or "0.0.0.0",
        gateway = net and net:gwaddr() or "0.0.0.0",
        pri_dns = dnsaddrs[1] or "0.0.0.0",
        snd_dns = dnsaddrs[2] or "0.0.0.0"
    }

    return data
end

local function count_wired_client()
    local string = util.exec("status lan_status")
    local status = split(string, " ")
    local connect = 0

    for i=1, #status do
        if status[i] == "connected" then
            connect = connect + 1
        end
    end

    return connect
end

local function count_wireless_client()
    local wlan  = require "luci.model.wireless"
    local ap = wlan.Apcfg()
    local sta_list = (ap and ap:assoclist()) or {}

    return #sta_list
end

local function write_header()
    local sys = require "luci.sys"
    local config = require "luci.sys.config"
    
    local model = string.gsub(sys.exec("getfirm MODEL") or "", "%c", "")
    local hardver = string.gsub(sys.exec("getfirm HARDVERSION") or "", "%c", "") 
    local softver = config.getsysinfo("SOFTVERSION") or ""
    local time = os.date("%Y-%m-%d %H:%M:%S") or ""
    local laninfo = get_lan_ipv4()
    local waninfo = get_wan_ipv4()
    local wired_clinum = count_wired_client()
    local wireless_clinum = count_wireless_client()

    --line 1
    io.write(string.rep("#", 68) .. crlf)
    --line 2
    model = string.gsub(model, "[\n\r]", "")
    io.write(string.format("# %28s System Log%s", model, crlf))
    --line 3
    io.write("# Time = " .. time .. crlf)
    --line 4
    io.write(string.format("# H-Ver = %s ; S-Ver = %s%s", hardver, softver, crlf))
    --line 5
    io.write(string.format("# LAN: I = %s ; M = %s ; MAC = %s %s", 
               laninfo.ipaddr, laninfo.netmask, laninfo.macaddr, crlf))
    --line 6
    io.write(string.format("# WAN: W = %s ; I = %s ; M = %s ; MAC = %s %s", 
               waninfo.wan_type, waninfo.ipaddr, waninfo.netmask, waninfo.macaddr, crlf))
    --line 7
    io.write(string.format("#      G = %s ; D1 = %s ; D2 = %s %s", 
               waninfo.gateway, waninfo.pri_dns, waninfo.snd_dns, crlf))
    --line 8
    io.write(string.format("# Clients connected: %d ; WI-FI : %d %s", wired_clinum + wireless_clinum, wireless_clinum, crlf))
    --line 9
    io.write(string.rep("#", 68) .. crlf)
end

-- Parse args.
local i = 1
while i <= #arg do
    local v = arg[i]
    i = i + 1

    if v == "-a" then
        allow_all = true
    elseif v == "-l" then
        lang = arg[i]
        i = i + 1
    elseif v == "-m" then
        proj = arg[i]
        i = i + 1
    elseif v == "-p" then
        prio = arg[i]
        i = i + 1
    elseif v == "-w" then
        crlf = "\r\n"
    else
        usage()
        os.exit(1)
    end
end

write_header()

local log = require "logread"
local log = log.open()
local filter = {
    lang = lang,
    proj = proj,
    prio = prio,
    allow_all = allow_all
}
log:read(filter,
         function(rec)
             if rec.proj_id then
                 io.write(string.format("%s %s[%u]: <%u> %.3u%.3u ",
                                        rec.date, rec.name, rec.pid,
                                        rec.prio, rec.proj_id, rec.msg_id))
                 io.write(rec.msg)
             else
                 io.write(rec.msg)
             end
             eol()
end)
log:close()
